{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.2.0.0",
        "fileVersion": "4.2.0-4.22220.5 (432d17a8)",
        "semanticVersion": "4.2.0",
        "language": "es-MX"
      },
      "results": [
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/TrackingControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 49,
                  "endLine": 19,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/TrackingControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 55,
                  "endLine": 19,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 45,
                  "endLine": 19,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 51,
                  "endLine": 19,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "El elemento campo \"_homeRepositorio\" que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declarar el elemento campo como que admite un valor NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/HomeControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "endLine": 19,
                  "endColumn": 59
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/HomeControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "endLine": 19,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 31,
                  "startColumn": 48,
                  "endLine": 31,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PedidosControllerTest.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 53,
                  "endLine": 23,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 51,
                  "endLine": 23,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 51,
                  "endLine": 23,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/MenuControllerTest.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 45,
                  "endLine": 22,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 46,
                  "endLine": 39,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 52,
                  "endLine": 39,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 50,
                  "endLine": 33,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 56,
                  "endLine": 33,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 23,
                  "startColumn": 57,
                  "endLine": 23,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 52,
                  "endLine": 36,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 48,
                  "startColumn": 51,
                  "endLine": 48,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 53,
                  "endLine": 61,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 60,
                  "endLine": 35,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 47,
                  "startColumn": 56,
                  "endLine": 47,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0169",
          "level": "warning",
          "message": "El campo 'HomeControllerTest._homeRepositorio' nunca se usa",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/HomeControllerTest.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 43,
                  "endLine": 19,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 3
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/TrackingControllerTest.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/HomeControllerTest.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "endLine": 27,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ExcepcionControllerTest.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 13,
                  "endLine": 18,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/HomeControllerTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 13,
                  "endLine": 36,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "endLine": 27,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "endLine": 27,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 13,
                  "endLine": 42,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/MenuControllerTest.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 13,
                  "endLine": 25,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/AuthControllerTest.cs",
                "region": {
                  "startLine": 34,
                  "startColumn": 13,
                  "endLine": 34,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PersonaControllerTest.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 13,
                  "endLine": 36,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PedidosControllerTest.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/PedidosControllerTest.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "endLine": 27,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 13,
                  "endLine": 39,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 13,
                  "endLine": 52,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 13,
                  "endLine": 64,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProductosControllerTest.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 13,
                  "endLine": 65,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 38,
                  "startColumn": 13,
                  "endLine": 38,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/ALGORITMOS/source/repos/Web%20Pizzeria/MaxdelTest/Controllers/ProcesarControllerTest.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 13,
                  "endLine": 51,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        }
      ],
      "rules": {
        "CS0169": {
          "id": "CS0169",
          "shortDescription": "Nunca se usa el campo",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0169)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Un campo que no acepta valores NULL debe contener un valor distinto de NULL al salir del constructor. Considere la posibilidad de declararlo como que admite un valor NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8625": {
          "id": "CS8625",
          "shortDescription": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8625)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2019": {
          "id": "NUnit2019",
          "shortDescription": "Consider using Assert.That(expr, Is.Not.Null) instead of Assert.IsNotNull(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2019.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2038": {
          "id": "NUnit2038",
          "shortDescription": "Consider using Assert.That(actual, Is.InstanceOf(expected)) instead of Assert.IsInstanceOf(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2038.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}